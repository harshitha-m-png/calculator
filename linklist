#include <stdio.h>
#include <stdlib.h>
typedef struct Node 
{
    int data;
    struct Node* next;
} Node;

 
void insertNode(Node** head, int data)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = *head;
    *head = newNode;
}

 
void printList(Node* head) 
{
    Node* temp = head;
    while (temp != NULL)
{
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

 
void deleteNode(Node** head, int key) 
{
    Node *temp = *head, *prev;
 if (temp != NULL && temp->data == key) 
{
        *head = temp->next;
        free(temp);
        return;
    }

     
    while (temp != NULL && temp->data != key)
{
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL)
        return;
    prev->next = temp->next;
    free(temp);
}

int FindElement(int);

int main() 
{
int findelem,findplc;
    Node* head = NULL;
    insertNode(&head, 10);
    insertNode(&head, 20);
    insertNode(&head, 30);
    insertNode(&head, 40);

    printf("Linked list before deletion: ");
    printList(head);

    deleteNode(&head, 30);

    printf("Linked list after deletion: ");
    printList(head);

    deleteNode(&head, 10);

    printf("Linked list after deletion: ");
    printList(head);
    return 0;

printf(" Input the element to be searched : ");
    scanf("%d", &FindElem);

 FindPlc = FindElement(FindElem);

if (FindPlc <= n)
        printf(" Element found at node %d \n\n", FindPlc);
    else
        printf(" This element does not exist in the linked list.\n\n");
}

int FindElement(int FindElem)
{
    int ctr = 1;
    temp= &data;
    while (temp->next != NULL)
    {
        if (temp->newnode== FindElem)
            break;
        else
        {
            ctr++;
            temp=temp->next;
        }
    }
    return ctr; 
}
